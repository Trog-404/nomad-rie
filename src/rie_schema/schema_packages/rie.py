#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from typing import (
    TYPE_CHECKING,
)

import numpy as np
import pandas as pd
from nomad.datamodel.data import (
    EntryData,
)
from nomad.datamodel.metainfo.basesections import Process, ProcessStep
from nomad.metainfo import (
    Quantity,
    SchemaPackage,
    Section,
    SubSection,
)
from nomad.units import ureg

if TYPE_CHECKING:
    from nomad.datamodel.datamodel import (
        EntryArchive,
    )
    from structlog.stdlib import (
        BoundLogger,
    )

m_package = SchemaPackage()


class Step(ProcessStep):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section(
        a_eln={
            'properties': {
                'order': [
                    'name',
                    'start_time',
                    'SF6_massflow',
                    'CHF3_massflow',
                    'O2_massflow',
                    'Ar_massflow',
                    'Chamber_pressure',
                    'Chuck_temperature',
                    'Power',
                    'Biasduration',
                ]
            }
        },
    )
    SF6_massflow = Quantity(
        type=np.float64,
        description='Flow of SF6 in the chamber',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'centimeter**3/minute'},
        unit='centimeter**3/minute',
    )
    CHF3_massflow = Quantity(
        type=np.float64,
        description='Flow of CHF3 in the chamber',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'centimeter**3/minute'},
        unit='centimeter**3/minute',
    )
    O2_massflow = Quantity(
        type=np.float64,
        description='Flow of O2 in the chamber',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'centimeter**3/minute'},
        unit='centimeter**3/minute',
    )
    Ar_massflow = Quantity(
        type=np.float64,
        description='Flow of Ar in the chamber',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'centimeter**3/minute'},
        unit='centimeter**3/minute',
    )
    Chamber_pressure = Quantity(
        type=np.float64,
        description='Pressure in the chamber',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'mbar'},
        unit='mbar',
    )
    Chuck_temperature = Quantity(
        type=np.float64,
        description='Temperature of the chuck',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'celsius'},
        unit='celsius',
    )
    Power = Quantity(
        type=np.float64,
        description='Power erogated',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'watt'},
        unit='watt',
    )
    Bias = Quantity(
        type=np.float64,
        description='Bias voltage in the chamber',
        a_eln={'component': 'NumberEditQuantity', 'defaultDisplayUnit': 'volt'},
        unit='volt',
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `Step` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)


class EtchingWorkflow(Process, EntryData):
    """
    Class autogenerated from yaml schema.
    """

    m_def = Section()
    steps = SubSection(
        section_def=Step,
        repeats=True,
    )

    data_file = Quantity(
        type=str,
        description='The recipe file for the rie process.',
        a_eln={
            'component': 'FileEditQuantity',
        },
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        """
        The normalizer for the `Workflow` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        """
        super().normalize(archive, logger)
        if self.data_file:
            with archive.m_context.raw_file(self.data_file) as file:
                df = pd.read_csv(file, sep=';')
            steps = []
            for i, row in df.iterrows():
                step = Step()
                step.name = row['step name']
                step.SF6_massflow = ureg.Quantity(
                    float(row['SF6 massflow [sccm]']), 'centimeter**3/minute'
                )
                step.CHF3_massflow = ureg.Quantity(
                    float(row['CHF3 massflow [sccm]']), 'centimeter**3/minute'
                )
                step.O2_massflow = ureg.Quantity(
                    float(row['O2 massflow [sccm]']), 'centimeter**3/minute'
                )
                step.Ar_massflow = ureg.Quantity(
                    float(row['Ar massflow [sccm]']), 'centimeter**3/minute'
                )
                step.Chamber_pressure = ureg.Quantity(
                    float(row['Chamber pressure [mbar]']), 'mbar'
                )
                step.Chuck_temperature = ureg.Quantity(
                    float(row['Chuck temperature [C]']), 'celsius'
                )
                step.Power = ureg.Quantity(float(row['Power [watt]']), 'watt')
                step.Bias = ureg.Quantity(float(row['Bias [V]']), 'volt')
                step.duration = ureg.Quantity(
                    float(row['etching time [min]']), 'minute'
                )
                steps.append(step)
            self.steps = steps


m_package.__init_metainfo__()
