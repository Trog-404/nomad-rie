#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from nomad.datamodel.data import EntryData
from nomad.datamodel.metainfo.basesections import Process
from nomad.datamodel.metainfo.basesections import ProcessStep
from nomad.units import ureg

import numpy as np
import pandas as pd

from typing import (
    TYPE_CHECKING,
)
from nomad.metainfo import (
    Package,
    Quantity,
    SubSection,
    Section,
)
from nomad.datamodel.data import (
    EntryData,
    ArchiveSection,
)
if TYPE_CHECKING:
    from nomad.datamodel.datamodel import (
        EntryArchive,
    )
    from structlog.stdlib import (
        BoundLogger,
    )

m_package = Package(name='Etching workflow schema')


class Step(ProcessStep, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_eln={
            "properties": {
                "order": [
                    "name",
                    "SF6_massflow",
                    "CHF3_massflow",
                    "O2_massflow",
                    "Ar_massflow",
                    "Chamber_pressure",
                    "Chuck_temperature",
                    "Power",
                    "Bias"
                ]
            }
        },)
    SF6_massflow = Quantity(
        type=np.float64,
        description='Flow of SF6 in the chamber',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    CHF3_massflow = Quantity(
        type=np.float64,
        description='Flow of CHF3 in the chamber',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    O2_massflow = Quantity(
        type=np.float64,
        description='Flow of O2 in the chamber',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    Ar_massflow = Quantity(
        type=np.float64,
        description='Flow of Ar in the chamber',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    Chamber_pressure = Quantity(
        type=np.float64,
        description='Pressure in the chamber',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"
        },
        unit="mbar",
    )
    Chuck_temperature = Quantity(
        type=np.float64,
        description='Temperature of the chuck',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "celsius"
        },
        unit="celsius",
    )
    Power = Quantity(
        type=np.float64,
        description='Power erogated',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "watt"
        },
        unit="watt",
    )
    Bias = Quantity(
        type=np.float64,
        description='Bias voltage in the chamber',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "volt"
        },
        unit="volt",
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `Step` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class Workflow(Process, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    steps = SubSection(
        section_def=Step,
        repeats=True,
    )

    data_file = Quantity(
        type=str,
        description='The recipe file for the rie process.',
        a_eln={
            "component": "FileEditQuantity",
        },
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `Workflow` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)
        if self.data_file:
            with archive.m_context.raw_file(self.data_file) as file:
                df = pd.read_csv(file, sep=";")
            steps = []
            for i, row in df.iterrows():
                step = Step()
                step.name = row['step name']
                step.SF6_massflow = ureg.Quantity(float(row['SF6_massflow [celsius]']), 'celsius')
                step.CHF3_massflow = ureg.Quantity(float(row['CHF3_massflow [celsius]']), 'celsius')
                step.O2_massflow = ureg.Quantity(float(row['O2_massflow [celsius]']), 'celsius')
                step.Ar_massflow = ureg.Quantity(float(row['Ar_massflow [celsius]']), 'celsius')
                step.Chuck_temperature = ureg.Quantity(
                row['Chuck temperature [C]'], 'celsius'
                )
                step.Chamber_pressure = ureg.Quantity(
                    row['Pressure [mbar]'], 'mbar'
                )
                step.Power = ureg.Quantity(
                    row['Power [W]'], 'watt'
                )
                step.Bias = ureg.Quantity(
                    row['Voltage [V]'], 'volt'
                )
                steps.append(step)
            self.steps=steps


m_package.__init_metainfo__()
